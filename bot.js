import { Telegraf, Markup } from 'telegraf';
import { config } from 'dotenv';
import { userStore } from './services/userStore.js';
import { testService } from './services/testService.js';
import { USER_STATES } from './config/index.js';

config();

const bot = new Telegraf(process.env.BOT_TOKEN);

function getGodparentMenu() {
  return Markup.keyboard([
    ['üìã –ú–æ–∂–Ω–æ –ª–∏ –º–Ω–µ –±—ã—Ç—å –∫—Ä–µ—Å—Ç–Ω—ã–º?'],
    ['üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¢–∞–∏–Ω—Å—Ç–≤—É'],
    ['‚õ™ –û–±—Ä—è–¥ –ö—Ä–µ—â–µ–Ω–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Ö—Ä–∞–º–µ'],
    ['üôè –î—É—Ö–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫—Ä–µ—Å—Ç–Ω–æ–≥–æ'],
    ['‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã']
  ]).resize();
}

function removeKeyboard() {
  return Markup.removeKeyboard();
}

async function sendTestQuestion(ctx, question) {
  const questionText = `–í–æ–ø—Ä–æ—Å ${testService.getProgress(question.id)}:\n${question.question}`;
  
  const options = question.options.map(option => option.text);
  
  const pollMessage = await ctx.replyWithPoll(
    questionText,
    options,
    {
      is_anonymous: false,
      type: 'regular'
    }
  );
  
  const userId = ctx.from.id;
  userStore.setUser(userId, {
    currentPollMessageId: pollMessage.message_id
  });
}

bot.start(async (ctx) => {
  const welcomeText = `# –ö–†–ï–©–ï–ù–ò–ï  
**–ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫**

## –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?  
- –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫—Ä–µ—â–∞–µ–º—ã—Ö: –û—Å–Ω–æ–≤—ã –≤–µ—Ä—ã, —Å–º—ã—Å–ª –¢–∞–∏–Ω—Å—Ç–≤–∞, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≥–ª–∞–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.  
- –ò–Ω—Å—Ç—Ä—É–∫—Ç–∏—Ä—É–µ—Ç –∫—Ä–µ—Å—Ç–Ω—ã—Ö: –ö—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–∏–µ–º–Ω–∏–∫–æ–º, –∫–∞–∫–∏–µ –º–æ–ª–∏—Ç–≤—ã –∑–Ω–∞—Ç—å, –≤ —á–µ–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –¥—É—Ö–æ–≤–Ω–∞—è —Ä–æ–ª—å.  

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:`;

  await ctx.reply(welcomeText, Markup.keyboard([
    ['üôã –Ø –±—É–¥—É –∫—Ä–µ—Å—Ç–Ω—ã–º', 'üéØ –•–æ—á—É –∫—Ä–µ—Å—Ç–∏—Ç—å—Å—è —Å–∞–º']
  ]).resize());
  
  userStore.updateUserState(ctx.from.id, USER_STATES.START);
});

bot.hears('üôã –Ø –±—É–¥—É –∫—Ä–µ—Å—Ç–Ω—ã–º', async (ctx) => {
  const userId = ctx.from.id;
  
  userStore.setUser(userId, { 
    role: 'godparent',
    state: USER_STATES.TAKING_TEST
  });

  const welcomeMessage = await ctx.reply(
    '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –∫—Ä–µ—Å—Ç–Ω–æ–≥–æ! –ß—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –≤–∞–º –ø–æ–º–æ—á—å, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π.',
    removeKeyboard()
  );

  userStore.setUser(userId, {
    welcomeMessageId: welcomeMessage.message_id
  });

  await startTest(ctx);
});

async function startTest(ctx) {
  const userId = ctx.from.id;
  const user = userStore.getUser(userId);
  
  if (user.welcomeMessageId) {
    try {
      await ctx.deleteMessage(user.welcomeMessageId);
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
    }
  }
  
  userStore.setUser(userId, {
    state: USER_STATES.TAKING_TEST,
    testAnswers: [],
    currentQuestion: 1
  });

  const firstQuestion = testService.getQuestion(1);
  await sendTestQuestion(ctx, firstQuestion);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
bot.on('poll_answer', async (ctx) => {
  console.log('Poll answer received:', ctx.pollAnswer);
  
  const pollAnswer = ctx.pollAnswer;
  const userId = pollAnswer.user.id;
  const user = userStore.getUser(userId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç
  if (!user || user.state !== USER_STATES.TAKING_TEST) {
    console.log('User not in test state or not found');
    return;
  }
  
  const currentQuestionId = user.testAnswers.length + 1;
  const currentQuestion = testService.getQuestion(currentQuestionId);
  
  if (!currentQuestion) {
    console.log('No current question found for ID:', currentQuestionId);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  const selectedOptionIndex = pollAnswer.option_ids[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Å—Å–∏–≤–∞
  if (selectedOptionIndex === undefined || selectedOptionIndex >= currentQuestion.options.length) {
    console.log('Invalid option index:', selectedOptionIndex);
    return;
  }
  
  const selectedOption = currentQuestion.options[selectedOptionIndex];
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
  user.testAnswers.push({ 
    questionId: currentQuestionId, 
    answer: selectedOption.id 
  });
  userStore.setUser(userId, user);
  
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—Ä–æ—Å
  if (user.currentPollMessageId) {
    try {
      await bot.telegram.deleteMessage(userId, user.currentPollMessageId);
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å–æ–º:', e.message);
    }
  }
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
  const nextQuestionId = currentQuestionId + 1;
  const nextQuestion = testService.getQuestion(nextQuestionId);
  
  if (nextQuestion) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const nextQuestionText = `–í–æ–ø—Ä–æ—Å ${testService.getProgress(nextQuestion.id)}:\n${nextQuestion.question}`;
    const options = nextQuestion.options.map(option => option.text);
    
    const pollMessage = await bot.telegram.sendPoll(
      userId,
      nextQuestionText,
      options,
      {
        is_anonymous: false,
        type: 'regular'
      }
    );
    
    userStore.setUser(userId, {
      currentPollMessageId: pollMessage.message_id
    });
  } else {
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    await completeTestForUser(userId);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function completeTestForUser(userId) {
  const user = userStore.getUser(userId);
  
  const knowledgeLevel = testService.calculateLevel(user.testAnswers);
  userStore.setUser(userId, {
    knowledgeLevel,
    state: USER_STATES.TEST_COMPLETED
  });

  const levelMessages = {
    beginner: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≤–µ—Ä–æ–π. –Ø –±—É–¥—É –¥–∞–≤–∞—Ç—å –≤–∞–º –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.',
    basic: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –£ –≤–∞—Å –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è. –Ø –±—É–¥—É –¥–æ–ø–æ–ª–Ω—è—Ç—å –∏—Ö –∏ –ø–æ–º–æ–≥–∞—Ç—å —É–≥–ª—É–±–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ.',
    churched: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –í–∏–∂—É, —á—Ç–æ –≤—ã —É–∂–µ –≤–æ—Ü–µ—Ä–∫–æ–≤–ª–µ–Ω—ã. –°–º–æ–≥—É –¥–∞–≤–∞—Ç—å –≤–∞–º –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.'
  };

  await bot.telegram.sendMessage(userId, levelMessages[knowledgeLevel]);
  await bot.telegram.sendMessage(
    userId,
    '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:',
    getGodparentMenu()
  );
}

async function completeTest(ctx) {
  const userId = ctx.from.id;
  await completeTestForUser(userId);
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
bot.hears('üìã –ú–æ–∂–Ω–æ –ª–∏ –º–Ω–µ –±—ã—Ç—å –∫—Ä–µ—Å—Ç–Ω—ã–º?', async (ctx) => {
  const user = userStore.getUser(ctx.from.id);
  
  if (user.state !== USER_STATES.TEST_COMPLETED) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.');
    return;
  }

  let response = '';
  switch(user.knowledgeLevel) {
    case 'beginner':
      response = '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –æ —Ç–æ–º, –∫—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—Ä–µ—Å—Ç–Ω—ã–º...';
      break;
    case 'basic':
      response = '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –±–∞–∑–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –∫—Ä–µ—Å—Ç–Ω—ã–º...';
      break;
    case 'churched':
      response = '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–æ–Ω—ã –∏ —Ü–µ—Ä–∫–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞...';
      break;
    default:
      response = '–†–∞–∑–¥–µ–ª "–ú–æ–∂–Ω–æ –ª–∏ –º–Ω–µ –±—ã—Ç—å –∫—Ä–µ—Å—Ç–Ω—ã–º?" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...';
  }

  await ctx.reply(response);
});

bot.hears('üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¢–∞–∏–Ω—Å—Ç–≤—É', async (ctx) => {
  const user = userStore.getUser(ctx.from.id);
  if (user.state !== USER_STATES.TEST_COMPLETED) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.');
    return;
  }
  await ctx.reply('–†–∞–∑–¥–µ–ª "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¢–∞–∏–Ω—Å—Ç–≤—É" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
});

bot.hears('‚õ™ –û–±—Ä—è–¥ –ö—Ä–µ—â–µ–Ω–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Ö—Ä–∞–º–µ', async (ctx) => {
  const user = userStore.getUser(ctx.from.id);
  if (user.state !== USER_STATES.TEST_COMPLETED) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.');
    return;
  }
  await ctx.reply('–†–∞–∑–¥–µ–ª "–û–±—Ä—è–¥ –ö—Ä–µ—â–µ–Ω–∏—è" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
});

bot.hears('üôè –î—É—Ö–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫—Ä–µ—Å—Ç–Ω–æ–≥–æ', async (ctx) => {
  const user = userStore.getUser(ctx.from.id);
  if (user.state !== USER_STATES.TEST_COMPLETED) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.');
    return;
  }
  await ctx.reply('–†–∞–∑–¥–µ–ª "–î—É—Ö–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
});

bot.hears('‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', async (ctx) => {
  const user = userStore.getUser(ctx.from.id);
  if (user.state !== USER_STATES.TEST_COMPLETED) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.');
    return;
  }
  await ctx.reply('–†–∞–∑–¥–µ–ª "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
});

bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

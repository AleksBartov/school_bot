const axios = require('axios');

// –í–∞—à–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5ZDg1MWJiZC05YzljLTQ4NTctYjI0OC0xNDBkNTYzMmFmODQiLCJleHAiOjE3NjA0NzE3ODIsImlhdCI6MTc2MDQ3MTMwMiwiZXNrIjoiZGIzYzJjZjUtMmUwZi00M2E2LThhMzMtY2RhNTgzOTFkOGI3IiwiZXNhaWQiOiI3NDk3NTYxODg1IiwiZWlkIjoiMTA4NzM3OTg4MyJ9.shs-RfmYNEJ9IQ3ZoVm-puG9_i3TyekTyPFM8mu4fAY";
const ssoKey = "db3c2cf5-2e0f-43a6-8a33-cda58391d8b7";
const IDes = {
  "Varvara": 614996,
  "Ivan": 647827,
  "Boris": 741052
}

// –ö—É–∫–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
const cookies = {
  '_ga': 'GA1.2.899629649.1760383314',
  '_gid': 'GA1.2.1649209595.1760383314', 
  '_ym_uid': '1760383318884942455',
  '_ym_d': '1760383318',
  '_ym_isad': '1',
  'sso-key': ssoKey,
  'X-JWT-Token': token
};

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –∫—É–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
const cookieString = Object.entries(cookies)
  .map(([key, value]) => `${key}=${value}`)
  .join('; ');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ axios
const api = axios.create({
  baseURL: 'https://dnevnik2.petersburgedu.ru',
  headers: {
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    'Cookie': cookieString
  }
});



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ URL (–∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
function createExactUrl(educationId, dateFrom, dateTo, limit = 100, page = 1) {
  // –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  const params = new URLSearchParams();
  params.append('p_educations[]', educationId);  // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: p_educations[] –≤–º–µ—Å—Ç–æ p_education[]
  params.append('p_date_from', dateFrom);
  params.append('p_date_to', dateTo);
  params.append('p_limit', limit.toString());
  params.append('p_page', page.toString());
  
  return `/api/journal/estimate/table?${params.toString()}`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
async function getGrades(periodName, dateFrom, dateTo) {
  try {
    console.log(`\nüìÖ ${periodName} (${dateFrom} - ${dateTo})`);
    console.log('='.repeat(50));
    
    const url = createExactUrl(IDes.Boris, dateFrom, dateTo, 200, 1);
    const response = await api.get(url);
    
    if (response.data && response.data.data && response.data.data.items) {
      const items = response.data.data.items;
      
      if (items.length === 0) {
        console.log('üìù –û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç');
        return;
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥
      const periodItems = items.filter(item => {
        const itemDate = new Date(item.date.split('.').reverse().join('-'));
        const fromDate = new Date(dateFrom.split('.').reverse().join('-'));
        const toDate = new Date(dateTo.split('.').reverse().join('-'));
        return itemDate >= fromDate && itemDate <= toDate;
      });
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${periodItems.length} –æ—Ü–µ–Ω–æ–∫:\n`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
      const byDate = {};
      periodItems.forEach(item => {
        if (!byDate[item.date]) byDate[item.date] = [];
        byDate[item.date].push(item);
      });
      
      // –í—ã–≤–æ–¥–∏–º –ø–æ –¥–∞—Ç–∞–º (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é - —Å–≤–µ–∂–∏–µ —Å–Ω–∞—á–∞–ª–∞)
      Object.keys(byDate)
        .sort((a, b) => new Date(b.split('.').reverse().join('-')) - new Date(a.split('.').reverse().join('-')))
        .forEach(date => {
          console.log(`üóìÔ∏è  ${date}:`);
          byDate[date].forEach(grade => {
            const subject = grade.subject_name.padEnd(25, ' ');
            const type = grade.estimate_type_name.padEnd(20, ' ');
            console.log(`   üìö ${subject} ${grade.estimate_value_name} (${type})`);
          });
          console.log('');
        });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
      const bySubject = {};
      periodItems.forEach(item => {
        if (!bySubject[item.subject_name]) bySubject[item.subject_name] = [];
        bySubject[item.subject_name].push(item.estimate_value_name);
      });
      
      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:');
      Object.keys(bySubject).sort().forEach(subject => {
        const grades = bySubject[subject];
        const avg = grades.reduce((sum, grade) => sum + parseInt(grade), 0) / grades.length;
        console.log(`   ${subject.padEnd(25)}: ${grades.join(', ')} | –°—Ä–µ–¥–Ω—è—è: ${avg.toFixed(2)}`);
      });
      
    } else {
      console.log('üìù –û—Ü–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.response?.status || error.message);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
async function getCurrentWeekGrades() {
  const today = new Date();
  const weekStart = new Date(today);
  weekStart.setDate(today.getDate() - today.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
  
  const dateFrom = weekStart.toLocaleDateString('ru-RU');
  const dateTo = today.toLocaleDateString('ru-RU');
  await getGrades('–¢–ï–ö–£–©–ê–Ø –ù–ï–î–ï–õ–Ø', dateFrom, dateTo);
}

async function getOctoberGrades() {
  await getGrades('–û–ö–¢–Ø–ë–†–¨ 2025', '01.10.2025', '31.10.2025');
}

async function getSeptemberGrades() {
  await getGrades('–°–ï–ù–¢–Ø–ë–†–¨ 2025', '01.09.2025', '30.09.2025');
}

async function getCurrentQuarterGrades() {
  await getGrades('1 –ß–ï–¢–í–ï–†–¢–¨', '01.09.2025', '24.10.2025');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫
async function getTodayGrades() {
  const today = new Date().toLocaleDateString('ru-RU');
  await getGrades('–°–ï–ì–û–î–ù–Ø', today, today);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üéì –≠–õ–ï–ö–¢–†–û–ù–ù–´–ô –î–ù–ï–í–ù–ò–ö - –û–ë–ó–û–† –û–¶–ï–ù–û–ö');
  console.log('='.repeat(50));
  
  // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
  await getTodayGrades();
  await getCurrentWeekGrades();
  await getOctoberGrades();
  await getSeptemberGrades();
  await getCurrentQuarterGrades();
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);